extends layout
block content
    style.
        html{
            height: 100%;
        }
        body{
            height: 100%;
        }
        .container{
            height: 100%;
        }
        #map{
            height: 50%;
            width: 100%;
            position: relative;
            margin-top: 15px;
        }
        .bold{
            font-weight: bold;    
        }
        #chartWrapper{
            height: 30%;
            width: 100%;
        }
        #trackChart{
            height: 100%;
            width: 100%;
        }
        #splitButton{
            float: right;
        }
    script.
        $(window).resize(function(){
            drawChart($("input:radio[name ='chartType']:checked").val());
            trackMap.fitBounds(firstpolyline.getBounds());
        });
        $(document).ready(function(){
            $('input[type=radio][name=chartType]').change(function(){
                type = this.value;
                drawChart(type);
            });
            markersPosition = !{JSON.stringify(trackDetails.points)};
            markers = new Array();
            for(i=0;i<markersPosition.length; i++){
                var marker = L.latLng(parseFloat(markersPosition[i].lat), parseFloat(markersPosition[i].lon));
                markers.push(marker);
            }
        }); 
        $(function(){
            $("input").checkboxradio({
                icon: false
            });
        });
        var splitIndex;
        var trackMarker;
        google.charts.load('current', {packages: ['corechart']});
        google.charts.setOnLoadCallback(drawChart);
        function drawChart(type){
            if(type == '' || type == null || type == 'time'){    
                data = new google.visualization.arrayToDataTable(!{timeDataSet});
                var formatter = new google.visualization.DateFormat({pattern: 'HH:mm'});
                formatter.format(data, 0);
                var options = {
                    title: 'Track Speed & Altitude by Time',
                    colors: ['blue', 'green'],
                    hAxis: {title: 'Time',  titleTextStyle: {color: '#333'}, format: 'HH:mm'},
                    series: {
                        0: {targetAxisIndex:0},
                        1: {targetAxisIndex:1}
                    },
                    vAxes: {
                        0: {title: 'MPH', minValue: 0},
                        1: {title: 'Feet', minValue: 0}
                    },
                    legend: {position: 'in'},
                    chartArea:{left:0, top:0, width: "100%", height: "100%"}
                };
            }
            else if(type == 'distance'){
                data = new google.visualization.arrayToDataTable(!{distDataSet});
                var options = {
                    title: 'Track Speed & Altitude by Distance',
                    colors: ['blue', 'green'],
                    hAxis: {title: 'Distance',  titleTextStyle: {color: '#333'}},
                    series: {
                        0: {targetAxisIndex:0},
                        1: {targetAxisIndex:1}
                    },
                    vAxes: {
                        0: {title: 'MPH', minValue: 0},
                        1: {title: 'Feet', minValue: 0}
                    },
                    legend: {position: 'in'},
                    chartArea:{left:0, top:0, width: "100%", height: "100%"}
                };
            }
            var trackChart = new google.visualization.AreaChart(document.getElementById('trackChart'));
            trackChart.draw(data, options);

            google.visualization.events.addListener(trackChart, 'select', function() {
                var selection = trackChart.getSelection();
                splitTrack = #{trackDetails.trackName};
                splitIndex = selection[0].row;
                $('#splitButton').removeClass('disabled').attr('href', 'split?track=' + splitTrack + '&index=' + splitIndex);

            });
            google.visualization.events.addListener(trackChart, 'onmouseover', function(e) {
                showMarker(e.row);
                return;
            });
            google.visualization.events.addListener(trackChart, 'onmouseout', function(e) {
                hideMarker(e.row);
                return;
            });
        }

        function showMarker(row) {
            var pointIcon;
            if (row != null) {
                pointIcon = L.icon({
                    iconUrl: 'stylesheets/images/marker-point.png',
                    shadowUrl: 'stylesheets/images/marker-point.png',

                    iconSize:     [15, 15], // size of the icon
                    shadowSize:   [0, 0], // size of the shadow
                    iconAnchor:   [7, 7], // point of the icon which will correspond to marker's location
                    shadowAnchor: [0, 0],  // the same for the shadow
                    popupAnchor:  [0, 0] // point from which the popup should open relative to the iconAnchor
                });
                trackMarker = L.marker(markers[row], {icon: pointIcon}).addTo(trackMap);
            }
            return;
        }

        function hideMarker(row) {
            if (row != null) {
                trackMap.removeLayer(trackMarker);
            }
            return;
        }

    body
        .container
            a(href="/osmandtracker" role='button').btn.btn-primary 
                <span class="glyphicon glyphicon-arrow-left"></span> <span>Tracks</span>
            h2 #{trackDetails.dateString.replace(/:00 GMT.*/, '')} - #{trackDetails.type}
            span.font-weight-bold Plot speed and altitude by: &nbsp;
            label(for='radio-1') Time
            input(id="radio-1", type="radio", name="chartType", value="time" checked="checked")
            label(for='radio-2') Distance
            input(id="radio-2", type="radio", name="chartType", value="distance")
            a(href="split" role='button' id="splitButton").btn.btn-primary.disabled
                span Split
            .row
                .col-md-3
                    p 
                        span.font-weight-bold Total Distance: 
                        | #{trackDetails.totalDistance}
                .col-md-3
                    p 
                        span.font-weight-bold Max Speed: 
                        | #{trackDetails.maxSpeed} MPH
                .col-md-3
                    p 
                        span.font-weight-bold Average Speed: 
                        | #{trackDetails.avgSpeed}
                .col-md-3
                    p 
                        span.font-weight-bold Moving Average: 
                        | #{trackDetails.movingAvg}
            .row
                .col-md-3
                    p 
                        span.font-weight-bold Elapsed Time: 
                        | #{trackDetails.elapsedTime}
                .col-md-3
                    p 
                        span.font-weight-bold Moving Time: 
                        | #{trackDetails.movingTime}
                .col-md-3
                    p &nbsp;
                .col-md-3
                    p &nbsp;
            div(id="chartWrapper")
                div(id="trackChart")
            div(id="map")

            script.
                mydata = !{JSON.stringify(trackDetails.points)};
                var pointList = [];
                var maxLon = Number(mydata[0].lon);
                var minLon = Number(mydata[0].lon);
                var maxLat = Number(mydata[0].lat);
                var minLat = Number(mydata[0].lat);
                for(i=0;i<mydata.length;i++){
                    maxLon = Number(mydata[i].lon) > maxLon ? Number(mydata[i].lon) : maxLon;
                    minLon = Number(mydata[i].lon) < minLon ? Number(mydata[i].lon) : minLon;
                    maxLat = Number(mydata[i].lat) > maxLat ? Number(mydata[i].lat) : maxLat;
                    minLat = Number(mydata[i].lat) < minLat ? Number(mydata[i].lat) : minLat;

                    pointList.push(new L.latLng(mydata[i].lat, mydata[i].lon));
                }
                var centerLon = ((maxLon - minLon) / 2) + minLon;
                var centerLat = ((maxLat- minLat) / 2) + minLat;
                var trackMap = L.map('map').setView([centerLat, centerLon], 13);

                L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=#{mapboxApiKey}', {
                    attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',
                    maxZoom: 18,
                    id: 'mapbox.streets'
                }).addTo(trackMap);

                var firstpolyline = new L.Polyline(pointList, {
                    color: 'red',
                    weight: 3,
                    opacity: 0.5,
                    smoothFactor: 1
                });

                var startIcon = L.icon({
                    iconUrl: 'stylesheets/images/marker-icon-start.png',
                    shadowUrl: 'stylesheets/images/marker-shadow.png',

                    iconSize:     [25, 41], // size of the icon
                    shadowSize:   [41, 41], // size of the shadow
                    iconAnchor:   [12, 41], // point of the icon which will correspond to marker's location
                    shadowAnchor: [12, 41],  // the same for the shadow
                    popupAnchor:  [-3, -76] // point from which the popup should open relative to the iconAnchor
                });

                var endIcon = L.icon({
                    iconUrl: 'stylesheets/images/marker-icon-end.png',
                    shadowUrl: 'stylesheets/images/marker-shadow.png',

                    iconSize:     [25, 41], // size of the icon
                    shadowSize:   [41, 41], // size of the shadow
                    iconAnchor:   [12, 41], // point of the icon which will correspond to marker's location
                    shadowAnchor: [12, 41],  // the same for the shadow
                    popupAnchor:  [-3, -76] // point from which the popup should open relative to the iconAnchor
                });

                var startMarker = L.marker(pointList[0], {icon: startIcon});
                var endMarker = L.marker(pointList[pointList.length-1], {icon: endIcon});

                firstpolyline.addTo(trackMap); 
                trackMap.fitBounds(firstpolyline.getBounds(), {paddingTopLeft: [0, 25], paddingBottomRight: [25, 0]});
                startMarker.addTo(trackMap);
                endMarker.addTo(trackMap);
